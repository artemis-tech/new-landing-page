import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { sendMessage } from './contactAPI';

export interface ContactState {
  name: string;
  email: string;
  message: string;
  status: 'idle' | 'loading' | 'failed';
}

export const initialState: ContactState = {
  name: '',
  email: '',
  message: '',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(sendMessageAsync('contact message'))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const sendMessageAsync = createAsyncThunk(
  'contact/sendMessage',
  async (message: string) => {
    const response = await sendMessage(message);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const contactSlice = createSlice({
  name: 'contact',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state = initialState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(sendMessageAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(sendMessageAsync.fulfilled, (state) => {
        state.status = 'idle';
      })
      .addCase(sendMessageAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { reset } = contactSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectContactStatus = (state: RootState) => state.contact.status;

export default contactSlice.reducer;
